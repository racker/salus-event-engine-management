stream
  |from()
    .measurement('new_measurement')
    .groupBy('system_resource_id', 'system_monitor_id', 'system_monitoring_zone')
  |where(lambda:
    isPresent("resource_metadata_os") AND ("resource_metadata_os" == 'linux')
      )
  |window()
    .period(12m)
    .every(12m)
  |max('wField1')
    .as('max_wField1')
  |min('wField1')
    .as('min_wField1')
  |mean('wField1')
    .as('avg_wField1')
  |sum('wField1')
    .as('sum_wField1')
  |max('wField2')
    .as('max_wField2')
  |min('wField2')
    .as('min_wField2')
  |mean('wField2')
    .as('avg_wField2')
  |sum('wField2')
    .as('sum_wField2')
  |eval(lambda: (float("metric1") / float("metric2")) * 100.0, lambda: 20 - sqrt("number"), lambda: min("field1", "field2") + max("field3", "field4"))
    .as('percent', 'sqrt_val', 'combined_vals')
    .keep()
  |derivative('testVal')
    .unit(137s)
    .as('new_rate')
  |stateDuration(lambda: (("field" > 33) AND ("test" != 17)) OR ("new_field" =~ "my_value"))
    .unit(1m)
    .as('crit_count')
  |stateDuration(lambda: ("field" > 20))
    .unit(1m)
    .as('info_count')
  |alert()
    .stateChangesOnly()
    .id('{{ .TaskName }}:{{ .Group }}')
    .details('task={{.TaskName}}')
    .info(lambda: "info_count" >= 7)
    .warn(lambda: ("field" > 30) OR ("false" == FALSE))
    .crit(lambda: "crit_count" >= 2)
    .history(21)
    .topic('events')